defclass File native

def (is File) _close native "fileClose"
def (file is File) close
    if not file isOpen then throw ArgError new
    file _close
end

def (is File) isOpen native "fileIsOpen"
def (== File) open(path is String) native "fileOpen"

def (== File) open(path is String, block is Function)
    val file = File open(path)
    block call(file)
    file close
end

def (file is File) size
    if not file isOpen then throw ArgError new
    file _size
end

def (is File) _size native "fileSize"

// TODO(bob): Validate size is non-negative.
def (is File) readBytes(size is Int) native "fileReadBytesInt"
def (is File) streamBytes native "fileStreamBytes"

def (file is File) read
    // TODO(bob): Should default to UTF-8 when that's implemented.
    file read(encoding: ASCII)
end

def (file is File) read(encoding: encoding is Encoding)
    // TODO(bob): The node docs say the OS lies about file size sometimes.
    // Should check that here and make sure we've read the entire file.
    file readBytes(file size) decode(encoding)
end

def (== File) read(path is String, encoding: encoding is Encoding)
    var result = nothing
    File open(path) as file do
        // TODO(bob): Can just do "return" here if we do non-local returns.
        result = file read
    end
    result
end

def (== File) read(path is String)
    // TODO(bob): Should default to UTF-8 when that's implemented.
    File read(path, encoding: ASCII)
end

// TODO(bob): Move to separate "data" module.
defclass Buffer is Indexable native

// TODO(bob): Copied from core.mag. Unify.
def _boundsCheck(count is Int, index is Int)
    // Negative indices index backwards from the end.
    if index < 0 then index = count + index

    // Check bounds.
    if index < 0 then throw ArgError new
    if index >= count then throw ArgError new

    index
end

def (== Buffer) new(size is Int) native "bufferNewSize"
def (is Buffer) count native "bufferCount"

def (buffer is Buffer)[index is Int]
    buffer _subscript(_boundsCheck(buffer count, index))
end

def (is Buffer) _subscript(is Int) native "bufferSubscriptInt"

def (buffer is Buffer)[index is Int]=(value)
    buffer _subscriptSet(_boundsCheck(buffer count, index), value)
end

def (is Buffer) _subscriptSet(index is Int, value) native "bufferSubscriptSetInt"
def (is Buffer) decode(== ASCII) native "bufferDecodeAscii"
def (is Buffer) decode(== UTF8)
    throw "Not implemented yet."
end

defclass Stream is Iterable native

def (s is Stream) iterate
    s
end

def (is Stream) advance native "streamAdvance"

defclass Encoding
    val name is String
end

val ASCII = Encoding new(name: "ASCII")
val UTF8 = Encoding new(name: "UTF-8")

// Now that everything is defined, wire it up to the VM.
def _bindIO() native "bindIO"
_bindIO()
